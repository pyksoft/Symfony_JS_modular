BASE_URL = ""

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 *                          ANGULAR JS                               *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
var app = angular.module("modular-admin",['ngRoute']);


// * * * ROUTING * * * 
app.config(['$routeProvider', '$locationProvider' , function( $routeProvider, $locationProvider ){
    
    // Set the routes for all the modules
    var i=0;
    var mainRoute = window.location.origin+window.location.pathname;
    for(m in MODULES){
        var M = MODULES[m];
        // MODULE PAGE
        $routeProvider.when( "/"+M.labels.name, { 
        	templateUrl : mainRoute+m
        });
        // MODULE DATA SINGLE PAGE

        $routeProvider.when( "/"+M.labels.name+"/:id", { 
            templateUrl : (function(m){ return function(params){ return mainRoute+"single/"+m+"/"+params.id;}})(m)
        });

        //default page is first modules
        if(i==0) $routeProvider.when( "/", { redirectTo : "/"+M.labels.name });
        i++;
    }

    $routeProvider.otherwise( { redirectTo : "/" });
    //$locationProvider.html5Mode(true);
}]);
// * * * SETTING ANGULAR TAGS * * * 
// (TWIG CONFLICT)
app.config(['$interpolateProvider' , function($interpolateProvider){
    $interpolateProvider.startSymbol('{[').endSymbol(']}');
}]);;// * * * MAIN CONTROLLER * * *
app.controller('mainController',['$scope' , '$location' , '$route' , '$http', function($scope , $location , $route , $http ){
    
    // set "current" class to current menu item
    $scope.isCurrentMenuItem = function ( path ){
		var rgx = new RegExp(path+"(\/[^ ]+)*");
		return rgx.test( $location.path() ) ? 'current' : '' ;
    }
     
}]);;// * * * MAIN CONTROLLER * * *
app.controller('moduleController',['$scope' , '$location' , '$route' , '$timeout','moduleService', function($scope , $location , $route , $timeout , moduleService ){
    
    $scope.setModule = function(module){
        $scope.module = module.name;
        $scope.labels = module.labels;
    }

    $scope.create = function(module){
        if(!module) module = $scope.module;
        moduleService.create(module,function(id){
            $timeout(function(){
                $scope.$apply(function() { $location.path("/"+$scope.labels.name+"/"+id);  })
            });
        });
    }

    $scope.getData = function(id , module){
        if(!module) module = $scope.module;
        if(!id) id = $scope.id;
        moduleService.get(id,module,function(data){
            $scope.data = data;
        });
    }

    $scope.getAllData = function(module){
        if(!module) module = $scope.module;
        moduleService.getAll(module,function(data){
            $scope.data = data;
        });
    }

    $scope.deleteData = function(id,module){
        if(!module) module = $scope.module;
        moduleService.delete(id,module,function(){
            $scope.getAllData();
        });
    }
     
}]);;app.controller('moduleListController',['$scope','$filter',function($scope,$filter){
	
	$scope.init = function(module , columns){
        $scope.setModule(module);
        $scope.columns = columns;
        $scope.getAllData();
    }

    $scope.getListValue = function(data,col){
    	if(col.type == 'date')
    		return $filter('twigDate')(data[col.name],'medium');
    	else if(col.type == 'label')
    		return $scope.labels[data[col.name]];
    	else
    		return data[col.name];
    }
    
}]);;app.controller('moduleSingleController',['$scope','$http','moduleService',function($scope , $http,moduleService){

    

    $scope.init = function(module , id ){
        $scope.setModule(module);
        $scope.id = id;
        $scope.getData(id);
    }

    $scope.save = function(module,data){
        if(!module) module = $scope.module;
        if(!data) data = $scope.data;

        moduleService.save(data,module,function(data){
            // done
        });
    }


}]);;app.filter('capitalize', function($filter) {
    return function( s ) {
        return s.charAt(0).toUpperCase() + s.slice(1);;
    };
});;app.filter('twigDate', ['$filter' , function($filter) {
    return function(obj, format ) {
        return $filter('date')(obj.date.replace(" ","T"),format);
    };
}]);;app.service('moduleService',['$http',function($http){
	var self = this;

	$http.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded";

	self.create = function( module , callbackSuccess , callbackError ){
		self.getQuery('create',module,function(data){
			if( typeof(callbackSuccess) === 'function')
            	callbackSuccess(data);
		},function(){
			if( typeof(callbackError) === 'function')
            	callbackError();
		});
	}

	self.get = function( id , module , callbackSuccess , callbackError ){
		self.getQuery('get',module+"/"+id,function(data){
			if( typeof(callbackSuccess) === 'function')
            	callbackSuccess(data);
		},function(){
			if( typeof(callbackError) === 'function')
            	callbackError();
		});
	}

	self.getAll = function( module , callbackSuccess , callbackError ){
		self.getQuery('getAll',module,function(data){
			if( typeof(callbackSuccess) === 'function')
            	callbackSuccess(data);
		},function(){
			if( typeof(callbackError) === 'function')
            	callbackError();
		});
	}

	self.save = function( data , module , callbackSuccess , callbackError ){
		self.postQuery('save',module+"/"+data.id, data, function(data){
			if( typeof(callbackSuccess) === 'function')
            	callbackSuccess(data);
		},function(){
			if( typeof(callbackError) === 'function')
            	callbackError();
		});
	}

	self.delete = function( id , module , callbackSuccess , callbackError ){
		self.getQuery('delete',module+"/"+id,function(data){
			if( typeof(callbackSuccess) === 'function')
            	callbackSuccess(data);
		},function(){
			if( typeof(callbackError) === 'function')
            	callbackError();
		});
	}

	self.getQuery = function( action , params , callbackSuccess , callbackError ){
		$http.get( window.location.origin+window.location.pathname+action+'/'+params)
			.success(function(data) {
	            if( typeof(callbackSuccess) === 'function')
	            	callbackSuccess(data); 
	        })
			.error(function(data){
	        	if( typeof(callbackError) === 'function')
	            	callbackError();
	        });
	}

	self.postQuery = function( action , params , data , callbackSuccess , callbackError ){
		$http.post( window.location.origin+window.location.pathname+action+'/'+params , $.param(data) )
			.success(function(data) {
	            if( typeof(callbackSuccess) === 'function')
	            	callbackSuccess(data); 
	        })
			.error(function(data){
	        	if( typeof(callbackError) === 'function')
	            	callbackError();
	        });
	}

	return self;

}]);